import React, { Component } from "react";
import css from "./Tooltip.module.css";

export default class Tooltip extends Component {
  constructor() {
    super();
    this.state = {
      id: null,
      tooltip: null,
    };
  }

  componentDidUpdate() {
    if (this.tooltipNode) {
      let { left, top } = this.state.pos;
      this.tooltipCoords = this.tooltipNode.getBoundingClientRect();

      if (this.tooltipCoords.right >= this.areaCoords.right) {
        left = this.areaCoords.width - this.tooltipCoords.width - 5;
      }

      if (this.tooltipCoords.bottom >= this.areaCoords.bottom) {
        top = this.targetCoords.top - this.tooltipCoords.height - 5;
      }

      if (this.state.pos.left !== left || this.state.pos.top !== top) {
        this.setState({ pos: { top, left } });
      }
    }
  }

  locate(node) {
    while (node) {
      if (node.getAttribute) {
        const id = node.getAttribute("data-tooltip-id");
        const tooltip = node.getAttribute("data-tooltip");
        if (id || tooltip) return { id, tooltip, target: node };
      }
      node = node.parentNode;
    }

    return { id: null, tooltip: null, target: null };
  }

  move(e) {
    const { id, tooltip, target } = this.locate(e.target);

    if (!id && !tooltip) {
      this.setState({ id, tooltip });
      return;
    }

    if (id && this.props.data) {
      this.tooltipData = this.props.data(id);
    }

    this.targetCoords = target.getBoundingClientRect();
    this.areaCoords = this.area.getBoundingClientRect();

    const top =
      this.targetCoords.top +
      this.targetCoords.height -
      this.areaCoords.top +
      5;

    const left = this.targetCoords.left - this.areaCoords.left;

    this.setState({
      id,
      tooltip,
      pos: { top, left },
      tooltipData: this.tooltipData,
    });
  }

  render() {
    const { content, children } = this.props;
    const { id, tooltip, tooltipData, pos } = this.state;

    return (
      <div
        className={css.area}
        ref={(node) => (this.area = node)}
        onMouseMove={(e) => this.move(e)}
      >
        {((id && content) || tooltip) && (
          <div
            className={css.tooltip}
            ref={(node) => (this.tooltipNode = node)}
            style={{ top: pos.top, left: pos.left }}
          >
            {id ? content(tooltipData) : tooltip}
          </div>
        )}

        {children}
      </div>
    );
  }
}
