import React, { Component } from "react";
import cls from "classnames";
import css from "./Calendar.module.css";

import { LocaleContext } from "./Locale";

export default class Calendar extends Component {
  constructor(props) {
    super();
    this.start = null;
    this.state = {
      value: props.value || null,
      date: props.date || new Date(),
    };
  }

  changeMonth(dir) {
    const { date } = this.state;
    const temp = new Date(date);
    temp.setMonth(temp.getMonth() + dir);
    this.setState({ date: temp });
  }

  hashDate(d) {
    if (!d) return 0;
    return d.getFullYear() * 12 * 40 + d.getMonth() * 40 + d.getDate();
  }

  selectDate(e) {
    let ind = e.target.dataset.index;
    if (!ind) ind = e.target.parentNode.dataset.index;
    if (!ind) return;

    const temp = new Date(this.start);
    temp.setDate(temp.getDate() + ind * 1);
    if (this.props.change) this.props.change(temp);
  }

  render() {
    const locale = this.context._("__dates");

    let { startOnMonday = false } = this.props;
    const { value, date } = this.state;

    const shiftDays = startOnMonday ? 1 : 0;
    let dayNames = locale.days;
    if (shiftDays) dayNames = dayNames.slice(1).concat(dayNames[6]);

    const year = date.getFullYear();
    const month = date.getMonth();

    this.start = new Date(date);
    this.start.setDate(1);
    const sDay = -this.start.getDay() - shiftDays + 2;
    this.start.setDate(sDay);

    const valueHash = this.hashDate(value);
    const now = new Date(this.start);

    const dates = [];

    for (let i = 0; i < 6 * 7; i++) {
      const nowDay = now.getDay();
      const nowMonth = now.getMonth();

      const weekDay = nowDay === 0 || nowDay === 6;
      const currentMonth = nowMonth === month;
      const selected = valueHash === this.hashDate(now);

      dates.push({
        v: now.getDate(),
        c:
          "date " +
          (selected ? "selected " : "") +
          (weekDay ? "weekend " : "") +
          (!currentMonth ? "outside " : ""),
      });

      now.setDate(now.getDate() + 1);
    }

    return (
      <div className={css.calendar}>
        <div className={css.control}>
          <div
            className={cls(css.icon, "mdi mdi-chevron-left")}
            onClick={() => this.changeMonth(-1)}
          />

          <div className={css.month}>
            {locale.months[month]} {year}
          </div>

          <div
            className={cls(css.icon, "mdi mdi-chevron-right")}
            onClick={() => this.changeMonth(1)}
          />
        </div>

        <div className={css.days}>
          {dayNames.map((day) => (
            <div key={day} className={css.day}>
              {day}
            </div>
          ))}
        </div>

        <div className={css.dates} onClick={(e) => this.selectDate(e)}>
          {dates.map((date, i) => {
            return (
              <div
                key={i}
                className={`${css.date} ${
                  date.c.match("selected") && css.selected
                } ${date.c.match("weekend") && css.weekend} ${
                  date.c.match("outside") && css.outside
                }`}
                data-index={i}
              >
                <span>{date.v}</span>
              </div>
            );
          })}
        </div>
      </div>
    );
  }
}

Calendar.contextType = LocaleContext;
