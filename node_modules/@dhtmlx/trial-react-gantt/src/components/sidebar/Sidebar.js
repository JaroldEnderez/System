import React, { Component } from "react";
import { getDiffer, getAdder } from "@dhtmlx/trial-lib-gantt";
import { LocaleContext } from "../../wx/Locale";
import Button from "../../wx//Button";
import Text from "../../wx//Text";
import Textarea from "../../wx//Textarea";
import Select from "../../wx/Select";
import Slider from "../../wx//Slider";
import Datepicker from "../../wx/Datepicker";
import Counter from "../../wx/Counter";
import Links from "./Links";

import cls from "classnames";
import css from "./Sidebar.module.css";

const diffUnit = getDiffer("day");
const addUnit = getAdder("day");

export default class Sidebar extends Component {
  update(name, value) {
    let { task } = this.props;
    task[name] = value;

    switch (name) {
      case "start_date":
      case "end_date":
        task.duration = diffUnit(task.end_date, task.start_date);
        break;

      case "duration":
        task.duration = task.duration * 1;
        task.end_date = addUnit(task.start_date, task.duration);
        break;
    }

    this.props.action({ action: "update-task", id: task.id, obj: task });
  }

  delete() {
    this.props.action({ action: "delete-task", id: this.props.task.id });
    this.props.action({ action: "hide-details" });
  }

  hide() {
    this.props.action({ action: "hide-details" });
  }

  render() {
    const {
      compactMode,
      taskTypes,
      templates,
      task,
      links,
      tasksMap,
      action,
    } = this.props;

    const milestone = task.type === "milestone";

    const inLinks = links
      .filter((a) => a.target == task.id)
      .map((link) => ({ link, task: tasksMap[link.source] }));

    const outLinks = links
      .filter((a) => a.source == task.id)
      .map((link) => ({ link, task: tasksMap[link.target] }));

    const _ = this.context.__;

    const linksData = [
      { title: `${_("gantt", "Predecessors")}`, data: inLinks },
      { title: `${_("gantt", "Successors")}`, data: outLinks },
    ];

    return (
      <div className={cls(css.sidebar, { [css.compact]: compactMode })}>
        <div className={css.header}>
          <div className={css.close} onClick={() => this.hide()} />
          <div className={css.buttons}>
            <Button click={() => this.hide()}>{_("gantt", "Save")}</Button>
            <Button appearance="danger" click={() => this.delete()}>
              {_("gantt", "Delete")}
            </Button>
          </div>
        </div>

        <div className={css.body}>
          {templates.sidebarForm ? (
            <templates.sidebarForm
              task={task}
              linksData={linksData}
              action={action}
            />
          ) : (
            <>
              <Text
                autofocus={true}
                label={_("gantt", "Name")}
                value={task.text}
                change={(v) => this.update("text", v)}
              />

              <Textarea
                label={_("gantt", "Description")}
                value={task.details}
                change={(v) => this.update("details", v)}
              />

              {taskTypes.length > 1 && (
                <Select
                  label={_("gantt", "Type")}
                  value={task.type}
                  options={taskTypes}
                  change={(v) => this.update("type", v)}
                />
              )}

              <Datepicker
                label={_("gantt", "Start Date")}
                value={task.start_date}
                change={(v) => this.update("start_date", v)}
                readonly
              />

              {!milestone && (
                <>
                  <Datepicker
                    label={_("gantt", "End Date")}
                    value={task.end_date}
                    change={(v) => this.update("end_date", v)}
                    readonly
                  />

                  <Counter
                    label={_("gantt", "Duration")}
                    value={task.duration}
                    change={(v) => this.update("duration", v)}
                  />

                  <Slider
                    label={`${_("gantt", "Progress")}: ${task.progress}%`}
                    value={task.progress}
                    change={(v) => this.update("progress", v)}
                  />
                </>
              )}

              <Links linksData={linksData} action={action} />
            </>
          )}
        </div>
      </div>
    );
  }
}

Sidebar.contextType = LocaleContext;
