import { LocalData, LocalState } from "@dhtmlx/trial-lib-gantt";

const nextTick = () => Promise.resolve();

export class ReactLocalData extends LocalData {
  constructor(vm, emit) {
    super(emit);
    this._vm = vm;
    this._emit = emit;
    this._mounted = false;
  }
  updateStore(obj) {
    super.updateStore(obj);
    if (this._mounted) this._vm.forceUpdate();
  }
  mounted() {
    this._mounted = true;
  }
}

export class ReactLocalState extends LocalState {
  constructor(vm, emit) {
    const wrapper = (v) => {
      let h = [];
      return {
        set: (nv) => {
          if (v !== nv) {
            v = nv;
            h.forEach((x) => x(nv));
            vm.setState({ ...vm.state, ...this.getValues() });
          }
        },
        subscribe: (x) => {
          h.push(x);
          x(v);
        },
        get: () => v,
      };
    };
    super(wrapper);

    this._emit = emit;
  }
  getValues() {
    const data = super.getState();
    const out = {};
    for (var key in data) out[key] = data[key].get();

    return out;
  }
  actions(store) {
    return super.actions(store, this._emit, nextTick);
  }
}
